a <- (y1 - y2) / (1 - exp(-x0/10))
b <- y1 - a
out <- a*exp(-x0/10)+b
}
onshore_annuities <- tibble(year = initial.year:end.year,
technology = "onshore",
high = exponentialExtrapolation(year, initial.year, end.year, 82, 60),
low = exponentialExtrapolation(year, initial.year, end.year, 82, 40))
View(onshore_annuities)
exponentialExtrapolation <- function(x, x1, x2, y1, y2) {
x0 <- x - x1
a <- (y1 - y2) / (1 - exp(-(x2-x1)/10))
b <- y1 - a
out <- a*exp(-x0/10)+b
}
onshore_annuities <- tibble(year = initial.year:end.year,
technology = "onshore",
high = exponentialExtrapolation(year, initial.year, end.year, 82, 60),
low = exponentialExtrapolation(year, initial.year, end.year, 82, 40))
View(onshore_annuities)
ggplot(onshore_annuities, aes(x = row_number(), y = low)) + geom_line()
ggplot(onshore_annuities, aes(x = row_number(.), y = low)) + geom_line()
ggplot(onshore_annuities, aes(x = row_number(onshore_annuities), y = low)) + geom_line()
ggplot(onshore_annuities, aes(x = nrow(onshore_annuities), y = low)) + geom_line()
ggplot(onshore_annuities, aes(x = 1:nrow(onshore_annuities), y = low)) + geom_line()
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
View(CO2price)
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
View(RTE)
sum(RTE$Nucléaire)
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
View(capex)
View(capex)
View(capex)
?spread
write.table(x = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = value))
View(capex)
write.table(x = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = capex))
?write.table
write.table(x = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = capex), file = "outputs/documentation/capex.csv")
write.table(x = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = capex), file = "../outputs/documentation/capex.csv")
write.table(x = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = capex), file = "../outputs/documentation/capex.csv",
sep = ";", dec = ",")
docuTable <- function(df, file_name) {
#table for documentation
write.table(df, file = paste0("../outputs/documentation/",file_name),
sep = ";", dec = ",", row.names = F)
}
docuTable(df = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = capex),
file_name = "capex.csv")
View(fOM)
View(fOM)
docuTable(df = fOM %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = fOM),
file_name = "capex.csv")
docuTable(df = fOM %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = fOM),
file_name = "fOM.csv")
docuTable(df = capex %>%
filter(year %in% c(2015,2020,2030,2040,2050)) %>%
spread(key = technology, value = capex),
file_name = "capex.csv")
View(capex)
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
View(capa0)
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
View(capa0)
View(capex)
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
library(tidyverse); library(forcats); library(xlsx); library(stringr); library(lubridate)
initial.year <- 2015
end.year <- 2050
time.step <- 2 #in years
nb.week <- 6 #number of representative weeks (6 or 12)
readInput <- function(file_name) {
read.csv(file = paste0("../inputs/",file_name), sep = ";", comment.char = '#', dec = ",")
}
outputParameter <- function(data, file_name) {
write.table(data, file = paste0("../outputs/",file_name),
sep = ";", dec = ",",
row.names = F,
col.names = F,
quote = F)
}
outputTable <- function(data, file_name) {
write.table(data, file = paste0("../outputs/",file_name),
sep = ";", dec = ",",
row.names = F,
quote = F)
}
RTE <- read.table(paste0("../inputs/eCO2mix_RTE_Annuel-Definitif_",initial.year,".csv"), sep = ",", header = T, quote = "") %>%
# remove rows with na (including the last line of disclaimer)
drop_na() %>%
# keep only one observations per hour (i.e. drop half-hours)
separate(Heures, c("Hour", "Minute"), ":") %>%
filter(Minute %in% c("00")) %>%
select(-Minute) %>%
mutate(Hour = Hour %>% as.numeric()) %>%
# Build data per representative month
mutate(Date = as.Date(Date),
Day = wday(Date), #jour de la semaine, de 1 à 7. Le 1 est dimanche
Month = month(Date, label = T),
Year = year(Date)) %>%
# insert representative weeks
mutate(Week = ceiling(match(Month, month.abb)/(12/nb.week))) #Gather
capa0 <- readInput("Capacity2015.csv") %>%
mutate(Capacity = Capacity / 1000) # to get GW
MonthlyCapa <- readInput("/MonthlyCapacities_2015.csv")
Load <- RTE %>%
group_by(Year, Week, Day, Hour) %>%
summarise(Consumption = mean(Consommation), Exports = -mean(Ech..physiques)) %>%
ungroup() %>%
mutate(Load = Consumption + Exports) %>%
# add the hour in the representative week (1 to 68)
mutate(WeekHour = rep(1:168,nb.week)) %>%
mutate_at(vars(Consumption, Exports, Load), funs(. / 1000)) #to get GWh as unit
conso <- sum(RTE$Consommation) / 10^6
exports <- -sum(RTE$Ech..physiques) / 10^6
Load_evolution <- readInput(file_name = "Demand_DNTE.csv") %>%
# on retranche les exports (supposés constants) pour n'avoir que la conso
mutate_at(vars(DEC,DIV,SOB,EFF), funs(. - exports)) %>%
# on calcule l'augmentation de cette conso
mutate_at(vars(DEC,DIV,SOB,EFF), funs(. / .[1])) %>%
# on divise DEC par deux car il est trop haut
mutate(DEC = (DEC+1)/2)
WeeklyCapa <- MonthlyCapa %>%
mutate(Week = ceiling(match(Month, month.abb)/(12/nb.week))) %>%
select(Week, PV, Wind) %>%
group_by(Week) %>%
summarise(PV = mean(PV), Wind = mean(Wind)) %>%
ungroup()
PV <- RTE %>%
# get solar production in MWh
group_by(Year, Week, Day, Hour) %>%
summarise(Prod = mean(Solaire)) %>%
ungroup() %>%
mutate(Prod = ifelse(Prod>0, Prod, 0)) %>% # because of negative values...
mutate(WeekHour = rep(1:168,nb.week)) %>%
# add capacity in MW
left_join(., WeeklyCapa %>% select(Week, PV) %>% rename(Capacity = PV),
by = "Week") %>%
# compute profile per unit of GW for each representative week
mutate(Profile = Prod / Capacity)
ggplot(PV %>% filter(Week ==1), aes(x = 1:168, y = Profile)) + geom_line()
prodPV <- RTE %>% filter(Month == "Jan") %>% .$Solaire %>% (function(x) sum(x)/(12/nb.week))
loadFactor.PV <- prodPV / (MonthlyCapa$PV[1]*31*24); loadFactor.PV
View(PV)
mean(PV$Profile)
unlink("../outputs")
getwd()
?unlink
unlink("../outputs", recursive = TRUE)
unlink("../outputs", recursive = TRUE)
dir.create("../ouputs")
dir.create("../ouputs/documentation")
unlink("../outputs", recursive = TRUE)
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
library(tidyverse); library(forcats); library(xlsx); library(stringr); library(lubridate)
unlink("../outputs", recursive = TRUE)
dir.create("../ouputs")
unlink("../outputs", recursive = TRUE)
dir.create("../ouputs")
getwd()
unlink("../outputs", recursive = TRUE)
unlink("../outputs", recursive = TRUE)
dir.create("../outputs")
dir.create("../outputs/documentation")
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
library(tidyverse); library(forcats); library(xlsx); library(stringr); library(lubridate)
unlink("../outputs", recursive = TRUE)
dir.create("../outputs")
dir.create("../outputs/documentation")
dir.create("../outputs/tmp")
initial.year <- 2015
end.year <- 2050
time.step <- 2 #in years
nb.week <- 6 #number of representative weeks (6 or 12)
readInput <- function(file_name) {
read.csv(file = paste0("../inputs/",file_name), sep = ";", comment.char = '#', dec = ",")
}
outputParameter <- function(data, file_name) {
write.table(data, file = paste0("../outputs/",file_name),
sep = ",", dec = ".",
row.names = F,
col.names = F,
quote = F)
write.table(data, file = paste0("../tmp/outputs/",file_name),
sep = ";", dec = ",",
row.names = F,
col.names = F,
quote = F)
}
outputTable <- function(data, file_name) {
write.table(data, file = paste0("../outputs/",file_name),
sep = ",", dec = ".",
row.names = F,
quote = F)
write.table(data, file = paste0("../outputs/",file_name),
sep = ";", dec = ",",
row.names = F,
quote = F)
}
RTE <- read.table(paste0("../inputs/eCO2mix_RTE_Annuel-Definitif_",initial.year,".csv"), sep = ",", header = T, quote = "") %>%
# remove rows with na (including the last line of disclaimer)
drop_na() %>%
# keep only one observations per hour (i.e. drop half-hours)
separate(Heures, c("Hour", "Minute"), ":") %>%
filter(Minute %in% c("00")) %>%
select(-Minute) %>%
mutate(Hour = Hour %>% as.numeric()) %>%
# Build data per representative month
mutate(Date = as.Date(Date),
Day = wday(Date), #jour de la semaine, de 1 à 7. Le 1 est dimanche
Month = month(Date, label = T),
Year = year(Date)) %>%
# insert representative weeks
mutate(Week = ceiling(match(Month, month.abb)/(12/nb.week))) #Gather
capa0 <- readInput("Capacity2015.csv") %>%
mutate(Capacity = Capacity / 1000) # to get GW
MonthlyCapa <- readInput("/MonthlyCapacities_2015.csv")
Load <- RTE %>%
group_by(Year, Week, Day, Hour) %>%
summarise(Consumption = mean(Consommation), Exports = -mean(Ech..physiques)) %>%
ungroup() %>%
mutate(Load = Consumption + Exports) %>%
# add the hour in the representative week (1 to 68)
mutate(WeekHour = rep(1:168,nb.week)) %>%
mutate_at(vars(Consumption, Exports, Load), funs(. / 1000)) #to get GWh as unit
conso <- sum(RTE$Consommation) / 10^6
exports <- -sum(RTE$Ech..physiques) / 10^6
Load_evolution <- readInput(file_name = "Demand_DNTE.csv") %>%
# on retranche les exports (supposés constants) pour n'avoir que la conso
mutate_at(vars(DEC,DIV,SOB,EFF), funs(. - exports)) %>%
# on calcule l'augmentation de cette conso
mutate_at(vars(DEC,DIV,SOB,EFF), funs(. / .[1])) %>%
# on divise DEC par deux car il est trop haut
mutate(DEC = (DEC+1)/2)
Load_evolution %>%
mutate_at(vars(DEC,DIV,SOB,EFF), funs(.*conso + exports) ) %>%
gather(key = Scenario, value = Demand, -Year) %>%
ggplot(aes(x = Year, y = Demand, colour = Scenario)) + geom_line() + theme_bw()
ggsave(filename = "../outputs/demand_evolution.pdf", width = 4, height = 3.5)
WeeklyCapa <- MonthlyCapa %>%
mutate(Week = ceiling(match(Month, month.abb)/(12/nb.week))) %>%
select(Week, PV, Wind) %>%
group_by(Week) %>%
summarise(PV = mean(PV), Wind = mean(Wind)) %>%
ungroup()
PV <- RTE %>%
# get solar production in MWh
group_by(Year, Week, Day, Hour) %>%
summarise(Prod = mean(Solaire)) %>%
ungroup() %>%
mutate(Prod = ifelse(Prod>0, Prod, 0)) %>% # because of negative values...
mutate(WeekHour = rep(1:168,nb.week)) %>%
# add capacity in MW
left_join(., WeeklyCapa %>% select(Week, PV) %>% rename(Capacity = PV),
by = "Week") %>%
# compute profile per unit of GW for each representative week
mutate(Profile = Prod / Capacity)
ggplot(PV %>% filter(Week ==1), aes(x = 1:168, y = Profile)) + geom_line()
prodPV <- RTE %>% filter(Month == "Jan") %>% .$Solaire %>% (function(x) sum(x)/(12/nb.week))
loadFactor.PV <- prodPV / (MonthlyCapa$PV[1]*31*24); loadFactor.PV
remove(prodPV, loadFactor.PV)
Wind <- RTE %>%
# get solar production in MWh
group_by(Year, Week, Day, Hour) %>%
summarise(Prod = mean(Eolien)) %>%
ungroup() %>%
mutate(WeekHour = rep(1:168,nb.week)) %>%
# add capacity in MW
left_join(., WeeklyCapa %>%
select(Week, Wind) %>%
rename(Capacity = Wind),
by = "Week") %>%
# compute profile per unit of GW for each representative week
mutate(Profile = Prod / Capacity)
Wind %>% filter(Week == 1) %>%
ggplot(aes(x = WeekHour, y = Profile)) + geom_line()
prodWind <- RTE %>% filter(Month == "Jan") %>% .$Eolien
loadFactor.Wind <- prodWind / mean(MonthlyCapa$Wind[1])
remove(prodWind, loadFactor.Wind)
loadFactor.Wind <- sum(Wind$Prod[1:168]*4) / (MonthlyCapa$Wind[1]*28*24); loadFactor.Wind
remove(loadFactor.Wind)
nucCapa <- capa0 %>%
filter(Technology == "nuc_hist") %>%
select(Capacity) %>% as.numeric()
nucFac <- RTE %>%
group_by(Year, Week, Day, Hour) %>%
summarise(Prod=mean(Nucléaire)) %>%
ungroup() %>%
mutate(Factor=Prod/(nucCapa*1000)) %>%
mutate(WeekHour = rep(1:168,nb.week)) %>%
group_by(Week) %>% summarise(factor = mean(Factor)) %>% ungroup()
ListeNuclearPlants <- readInput("ListeNuclearPlants.csv")
for (i in 2:4) {
ListeNuclearPlants[,paste0("Visit",i)] <- ifelse(is.na(ListeNuclearPlants[,paste0("Visit",i)]),
ListeNuclearPlants[,paste0("Visit",i-1)]+10,
ListeNuclearPlants[,paste0("Visit",i)])
}
capex <- readInput("Capex.csv") %>%
gather(key = technology, value = capex, -year)
lifetimes <- readInput("Lifetimes.csv")
fOM <- readInput(file_name = "fixed_OM.csv") %>%
gather(key = technology, value = fOM, -year)
fuel <- readInput("Fuel_costs.csv") %>%
gather(key = technology, value = fuel, -year)
CO2price <- readInput("CO2_price.csv") %>%
gather(key = scenario.CO2, value = CO2.price, -year)
CO2content <- readInput("CO2_content.csv")
efficiency <- readInput("Efficiency.csv") %>%
gather(key = technology, value = efficiency, -year)
load_factor <- readInput("Load_factors.csv") %>%
select(month, coal, CCGT, TAC, lake, step, nuc_new) %>%
mutate(Week = ceiling(match(month, month.abb)/(12/nb.week))) %>%
select(-month) %>%
group_by(Week) %>%
summarise_all(mean) %>%
full_join(., nucFac, by = "Week") %>%
rename(nuc_hist = factor) %>%
mutate(nuc_retrofit = nuc_hist) %>%
select(Week, coal, CCGT, TAC, lake, step, nuc_hist, nuc_retrofit, nuc_new)
avg_load_factor <- load_factor %>%
gather(key = technology, value = load.factor, -Week) %>%
group_by(technology) %>% summarise(avg.load.factor = mean(load.factor)) %>% ungroup()
avg_load_factor[nrow(avg_load_factor)+1,1] <- "onshore"
avg_load_factor[nrow(avg_load_factor),2] <- sum(Wind$Profile)*365/(nb.week*7*8760)
avg_load_factor[nrow(avg_load_factor)+1,1] <- "PV"
avg_load_factor[nrow(avg_load_factor),2] <- sum(PV$Profile)*365/(nb.week*7*8760)
r <- 0.08
LCOE <- list(capex, lifetimes, fOM, fuel, CO2price, CO2content, efficiency, avg_load_factor) %>%
reduce(full_join) %>%
mutate(annuity = capex * r / (1 - (1+r)^-lifetime),
variable.CO2 = (fuel + CO2.content*CO2.price)/efficiency,
variable.noCO2 = fuel/efficiency,
generation.hours = 8760*avg.load.factor,
LCOE.CO2 = variable.CO2 + 1000*(annuity + fOM ) / generation.hours,
LCOE.noCO2 = variable.noCO2 + 1000*(annuity + fOM ) / generation.hours)
LCOE %>%
filter(scenario.CO2 == "low" & technology %in% c("CCGT","onshore","PV","nuc_new")) %>%
ggplot(aes(x = year, y = LCOE.noCO2, colour = technology)) + geom_point()
getAnnuity <- function(LCOE, variable.cost, generation.hours, fOM) {
# generation.hours = average number of hours of production in a year
annuity <- (LCOE - variable.cost)*generation.hours/1000 - fOM
}
linearExtrapolation <- function(x, x1, x2, y1, y2) {
y <- y1 + (x-x1)*(y2-y1)/(x2-x1)
}
exponentialExtrapolation <- function(x, x1, x2, y1, y2) {
x0 <- x - x1
a <- (y1 - y2) / (1 - exp(-(x2-x1)/10))
b <- y1 - a
out <- a*exp(-x0/10)+b
}
onshore_annuities <- tibble(year = initial.year:end.year,
technology = "onshore",
high = exponentialExtrapolation(year, initial.year, end.year, 82, 60),
low = exponentialExtrapolation(year, initial.year, end.year, 82, 40)) %>%
gather(key = scenario.enr, value = LCOE2, -c(year,technology)) %>%
left_join(., LCOE %>%
filter(technology == "onshore" & scenario.CO2 == "medium"),
by = c("year", "technology")) %>%
mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>%
select(year, scenario.enr, annuity2)
PV_annuities <- tibble(year = initial.year:end.year,
technology = "PV",
high = exponentialExtrapolation(year, initial.year, end.year, 90, 50),
low = exponentialExtrapolation(year, initial.year, end.year, 90, 25)) %>%
gather(key = scenario.enr, value = LCOE2, -c(year,technology)) %>%
left_join(., LCOE %>%
filter(technology == "PV" & scenario.CO2 == "medium"),
by = c("year", "technology")) %>%
mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>%
select(year, scenario.enr, annuity2)
nuc_new_annuities <- tibble(year = initial.year:end.year,
technology = "nuc_new",
low = linearExtrapolation(year, initial.year, end.year, 110, 70),
medium = linearExtrapolation(year, initial.year, end.year, 110, 90),
high = linearExtrapolation(year, initial.year, end.year, 110, 110)) %>%
gather(key = scenario.nuc, value = LCOE2, -c(year,technology)) %>%
left_join(., LCOE %>%
filter(technology == "nuc_new" & scenario.CO2 == "medium"),
by = c("year", "technology")) %>%
mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>%
select(year, scenario.nuc, annuity2)
nuc_retrofit_annuities <- tibble(year = initial.year:end.year,
technology = "nuc_retrofit")
for (i in seq(from=40,to=90,by=10)) {
col <- rep(i,nrow(nuc_retrofit_annuities))
nuc_retrofit_annuities <- cbind(nuc_retrofit_annuities, col)
colnames(nuc_retrofit_annuities)[ncol(nuc_retrofit_annuities)] <- paste0(i)
}
nuc_retrofit_annuities <- nuc_retrofit_annuities %>%
gather(key = scenario.nuc_hist, value = LCOE2, -c(year,technology)) %>%
left_join(., LCOE %>%
filter(technology == "nuc_retrofit" & scenario.CO2 == "medium"),
by = c("year", "technology")) %>%
mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>%
select(year, scenario.nuc_hist, annuity2)
nuc_hist_annuities <- tibble(year = initial.year:end.year,
technology = "nuc_hist",
LCOE2 = 42 ) %>%
left_join(., LCOE %>%
filter(technology == "nuc_hist" & scenario.CO2 == "medium"),
by = c("year", "technology")) %>%
mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>%
select(year, annuity2)
river.capa <- capa0 %>% filter(Technology == "river") %>% select(Capacity) %>% as.numeric()
river <- RTE %>%
#on calcule d'avoir le facteur de charge pour chaque mois, heure et jour
group_by(Week, Day, Hour) %>% summarise(prod = mean(Hydraulique...Fil.de.l.eau...éclusée)) %>% ungroup() %>%
mutate(WeekHour = rep(1:168,nb.week)) %>%
select(Week, WeekHour, prod) %>%
mutate(prod = prod / 1000)
lake_inflows <- RTE %>%
group_by(Week) %>% summarise(inflow = sum(Hydraulique...Lacs)) %>% ungroup() %>%
#convert to GWh
mutate(inflow = inflow / 1000)
step.capa <- readInput("Step_evolution.csv") %>%
mutate(capa = evolution*( capa0 %>% filter(Technology == "step") %>% select(Capacity) %>% as.numeric())) %>%
select(-evolution)
outputParameter(Load %>%
select(Week, WeekHour, Consumption) %>%
rename(Hour = WeekHour),
file_name = "consumption.csv")
outputParameter(Load %>%
select(Week, WeekHour, Exports) %>%
rename(Hour = WeekHour),
file_name = "exports.csv")
outputParameter(Load %>%
select(Week, WeekHour, Consumption) %>%
rename(Hour = WeekHour),
file_name = "consumption.csv")
write.table(data, file = paste0("../outputs/tmp/",file_name),
sep = ";", dec = ",",
row.names = F,
col.names = F,
quote = F)
outputParameter(Load %>%
select(Week, WeekHour, Consumption) %>%
rename(Hour = WeekHour),
file_name = "consumption.csv")
outputParameter(Load %>%
select(Week, WeekHour, Consumption) %>%
rename(Hour = WeekHour),
file_name = "consumption.csv")
outputParameter <- function(data, file_name) {
write.table(data, file = paste0("../outputs/",file_name),
sep = ",", dec = ".",
row.names = F,
col.names = F,
quote = F)
write.table(data, file = paste0("../outputs/tmp/",file_name),
sep = ";", dec = ",",
row.names = F,
col.names = F,
quote = F)
}
write.table(data, file = paste0("../outputs/tmp/",file_name),
sep = ";", dec = ",",
row.names = F,
quote = F)
outputTable <- function(data, file_name) {
write.table(data, file = paste0("../outputs/",file_name),
sep = ",", dec = ".",
row.names = F,
quote = F)
write.table(data, file = paste0("../outputs/tmp/",file_name),
sep = ";", dec = ",",
row.names = F,
quote = F)
}
outputParameter(Load %>%
select(Week, WeekHour, Consumption) %>%
rename(Hour = WeekHour),
file_name = "consumption.csv")
outputParameter(Load %>%
select(Week, WeekHour, Exports) %>%
rename(Hour = WeekHour),
file_name = "exports.csv")
outputParameter(Load_evolution %>% gather(key = scenario, value = demand, -Year),
file_name = "load_evolution.csv")
outputParameter(lifetimes, file_name = "lifetimes.csv")
VRE <- full_join(Wind %>% select(Week, WeekHour, Profile) %>% rename(onshore = Profile),
PV %>% select(Week, WeekHour, Profile) %>% rename(PV = Profile),
by = c("Week","WeekHour")) %>%
gather(key = technology, value = value, onshore:PV) %>%
select(technology, Week, WeekHour, value) %>%
outputParameter(file_name = "vre_profiles.csv")
outputTable(load_factor, file_name = "load_factor.csv")
outputParameter(LCOE %>% filter(scenario.CO2 == "medium") %>% select(year, technology, annuity), file_name = "annuities.csv")
outputParameter(fOM, file_name = "fixed_OM.csv")
outputParameter(fuel, file_name = "fuel_costs.csv")
outputParameter(efficiency, file_name = "efficiency.csv")
outputParameter(CO2content, file_name = "CO2_content.csv")
source('~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R')
