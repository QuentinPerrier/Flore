{
    "collab_server" : "",
    "contents" : "library(tidyverse); library(forcats); library(xlsx); library(stringr); library(lubridate)\n\ninitial.year <- 2015 \nend.year <- 2050\ntime.step <- 2 #in years\nnb.week <- 6 #number of representative weeks (6 or 12)\n\n# Import and export functions ---------------------------------------------\n\n# in order to have consistent inputs\nreadInput <- function(file_name) {\n  read.csv(file = paste0(\"../inputs/\",file_name), sep = \";\", comment.char = '#', dec = \",\")\n}\n\n# in order to have consistent outputs\noutputParameter <- function(data, file_name) {\n  write.table(data, file = paste0(\"../outputs/\",file_name), \n              sep = \";\", dec = \",\", \n              row.names = F, \n              col.names = F,\n              quote = F)\n}\n\noutputTable <- function(data, file_name) {\n  write.table(data, file = paste0(\"../outputs/\",file_name), \n              sep = \";\", dec = \",\", \n              row.names = F, \n              quote = F)\n}\n\n\n# Tidy data ----------------------------------------------------\n\n# RTE data on production and consumption\nRTE <- read.table(paste0(\"../inputs/eCO2mix_RTE_Annuel-Definitif_\",initial.year,\".csv\"), sep = \",\", header = T, quote = \"\") %>%\n  # remove rows with na (including the last line of disclaimer)\n  drop_na() %>%\n  # keep only one observations per hour (i.e. drop half-hours)\n  separate(Heures, c(\"Hour\", \"Minute\"), \":\") %>%\n  filter(Minute %in% c(\"00\")) %>%\n  select(-Minute) %>%\n  mutate(Hour = Hour %>% as.numeric()) %>%\n  # Build data per representative month\n  mutate(Date = as.Date(Date),\n         Day = wday(Date), #jour de la semaine, de 1 à 7. Le 1 est dimanche\n         Month = month(Date, label = T),\n         Year = year(Date)) %>% \n  # insert representative weeks\n  mutate(Week = ceiling(match(Month, month.abb)/(12/nb.week))) #Gather \n\n\n\n# Initial capacity installed\ncapa0 <- readInput(\"Capacity2015.csv\") %>%\n  mutate(Capacity = Capacity / 1000) # to get GW\n\n# Capacity per month\nMonthlyCapa <- readInput(\"/MonthlyCapacities_2015.csv\") \n\n\n# Extract load and net exports --------------------------------------------\n\nLoad <- RTE %>%\n  group_by(Year, Week, Day, Hour) %>%\n  summarise(Consumption = mean(Consommation), Exports = -mean(Ech..physiques)) %>%\n  ungroup() %>%\n  mutate(Load = Consumption + Exports) %>%\n  # add the hour in the representative week (1 to 68)\n  mutate(WeekHour = rep(1:168,nb.week)) %>%\n  mutate_at(vars(Consumption, Exports, Load), funs(. / 1000)) #to get GWh as unit\n\n\n\n# Compute load evolution\nconso <- sum(RTE$Consommation) / 10^6\nexports <- -sum(RTE$Ech..physiques) / 10^6\nLoad_evolution <- readInput(file_name = \"Demand_DNTE.csv\") %>%\n  # on retranche les exports (supposés constants) pour n'avoir que la conso\n  mutate_at(vars(DEC,DIV,SOB,EFF), funs(. - exports)) %>%\n  # on calcule l'augmentation de cette conso\n  mutate_at(vars(DEC,DIV,SOB,EFF), funs(. / .[1])) %>%\n  # on divise DEC par deux car il est trop haut\n  mutate(DEC = (DEC+1)/2)\n  \n#Check with graph\nLoad_evolution %>%\n  mutate_at(vars(DEC,DIV,SOB,EFF), funs(.*conso + exports) ) %>%\n  gather(key = Scenario, value = Demand, -Year) %>%\n  ggplot(aes(x = Year, y = Demand, colour = Scenario)) + geom_line() + theme_bw()\nggsave(filename = \"../outputs/demand_evolution.pdf\", width = 4, height = 3.5)\n\n\n# Extract solar profiles -----------------------------------------\n\nWeeklyCapa <- MonthlyCapa %>% \n  mutate(Week = ceiling(match(Month, month.abb)/(12/nb.week))) %>% \n  select(Week, PV, Wind) %>% \n  group_by(Week) %>% \n  summarise(PV = mean(PV), Wind = mean(Wind)) %>%\n  ungroup()\n\n# Get production per month per unit of capacity and compute profile\nPV <- RTE %>%\n  # get solar production in MWh\n  group_by(Year, Week, Day, Hour) %>%\n  summarise(Prod = mean(Solaire)) %>%\n  ungroup() %>%\n  mutate(Prod = ifelse(Prod>0, Prod, 0)) %>% # because of negative values...\n  mutate(WeekHour = rep(1:168,nb.week)) %>%\n  # add capacity in MW\n  left_join(., WeeklyCapa %>% select(Week, PV) %>% rename(Capacity = PV),\n            by = \"Week\") %>%\n  # compute profile per unit of GW for each representative week\n  mutate(Profile = Prod / Capacity)\n\nggplot(PV %>% filter(Week ==1), aes(x = 1:168, y = Profile)) + geom_line()\n\n# Note: by taking the average provides a good approximation of the output in terms of energy\n# But it must be completed with reserves requirements\n# Otherwise, taking a real week can be done with the following code\n# PV <- RTE %>% \n#   group_by(Week) %>% \n#   slice(1:168) %>% \n#   ungroup() %>% \n#   select(Month,Week,Day,Hour,Solaire) %>% \n#   rename(Prod = Solaire) %>% \n#   mutate(Prod = ifelse(Prod<0,0,Prod)) %>% #Remove negative values...\n#   left_join(., MonthlyCapa %>% select(Month,PV) %>% rename(Capacity = PV), by = c(\"Month\")) %>% \n#   mutate(Profile = Prod / Capacity)\n\n# Graphical check\n#PV %>% filter(Week == 1) %>%\n#  ggplot(aes(x = WeekHour, y = Profile)) + geom_line()\n\n# Load factor check on original data\nprodPV <- RTE %>% filter(Month == \"Jan\") %>% .$Solaire %>% (function(x) sum(x)/(12/nb.week))\nloadFactor.PV <- prodPV / (MonthlyCapa$PV[1]*31*24); loadFactor.PV\n#on retrouve bien le 6.2% comme Bernat Chabot : http://www.photovoltaique.info/IMG/pdf/9bpvfrance1-15.pdf\nremove(prodPV, loadFactor.PV)\n\n# Load factor check on final data\n#prodPV <- sum(PV$Prod[1:168]*4) / (MonthlyCapa$PV[1]*28*24); prodPV\n#remove(prodPV)\n\n\n# Extract wind profiles -----------------------------------------\n\n# Get production per month per unit of capacity and compute profile\nWind <- RTE %>%\n  # get solar production in MWh\n  group_by(Year, Week, Day, Hour) %>%\n  summarise(Prod = mean(Eolien)) %>%\n  ungroup() %>%\n  mutate(WeekHour = rep(1:168,nb.week)) %>%\n  # add capacity in MW\n  left_join(., WeeklyCapa %>% \n              select(Week, Wind) %>% \n              rename(Capacity = Wind), \n            by = \"Week\") %>%\n  # compute profile per unit of GW for each representative week\n  mutate(Profile = Prod / Capacity)\n\n# Graphical check\nWind %>% filter(Week == 1) %>%\n  ggplot(aes(x = WeekHour, y = Profile)) + geom_line()\n\n# Load factor check on original data\nprodWind <- RTE %>% filter(Month == \"Jan\") %>% .$Eolien\nloadFactor.Wind <- prodWind / mean(MonthlyCapa$Wind[1])\n#plot(x = 1:744, y = loadFactor.Wind)\n#on retrouve bien le graphique de RTE : http://www.rte-france.com/sites/default/files/apercu_energie_elec_2015_01.pdf, p6.\nremove(prodWind, loadFactor.Wind)\n\n# Load factor check on final data\nloadFactor.Wind <- sum(Wind$Prod[1:168]*4) / (MonthlyCapa$Wind[1]*28*24); loadFactor.Wind\nremove(loadFactor.Wind)\n\n\n\n# Load factor for nuclear -------------------------------------------------\n\nnucCapa <- capa0 %>% \n  filter(Technology == \"nuc_hist\") %>% \n  select(Capacity) %>% as.numeric()\n\nnucFac <- RTE %>% \n  group_by(Year, Week, Day, Hour) %>% \n  summarise(Prod=mean(Nucléaire)) %>%\n  ungroup() %>%\n  mutate(Factor=Prod/(nucCapa*1000)) %>%\n  mutate(WeekHour = rep(1:168,nb.week)) %>%\n  group_by(Week) %>% summarise(factor = mean(Factor)) %>% ungroup()\n\n#outputTable(nucFac %>% select(WeekHour, Factor), file_name = \"Nuclear_Profile.csv\")\n\n\n\n# Nuclear plant age -------------------------------------------------------\n\nListeNuclearPlants <- readInput(\"ListeNuclearPlants.csv\")\n\nfor (i in 2:4) {\n  ListeNuclearPlants[,paste0(\"Visit\",i)] <- ifelse(is.na(ListeNuclearPlants[,paste0(\"Visit\",i)]),\n                                         ListeNuclearPlants[,paste0(\"Visit\",i-1)]+10, \n                                         ListeNuclearPlants[,paste0(\"Visit\",i)])\n}\n\n\n  \n\n\n# Capex annuities and LCOE ---------------------------------------------------------\n\n# LCOE = annuity + fOM + (fuel + CO2price*CO2content)\n\ncapex <- readInput(\"Capex.csv\") %>%\n  gather(key = technology, value = capex, -year)\n\nlifetimes <- readInput(\"Lifetimes.csv\")\n\nfOM <- readInput(file_name = \"fixed_OM.csv\") %>%\n  gather(key = technology, value = fOM, -year)\n\nfuel <- readInput(\"Fuel_costs.csv\") %>%\n  gather(key = technology, value = fuel, -year)\n\nCO2price <- readInput(\"CO2_price.csv\") %>%\n  gather(key = scenario.CO2, value = CO2.price, -year)\n\nCO2content <- readInput(\"CO2_content.csv\") \n\nefficiency <- readInput(\"Efficiency.csv\") %>%\n  gather(key = technology, value = efficiency, -year)\n\nload_factor <- readInput(\"Load_factors.csv\") %>% \n  select(month, coal, CCGT, TAC, lake, step, nuc_new) %>%\n  mutate(Week = ceiling(match(month, month.abb)/(12/nb.week))) %>% \n  select(-month) %>% \n  group_by(Week) %>% \n  summarise_all(mean) %>% \n  full_join(., nucFac, by = \"Week\") %>%\n  rename(nuc_hist = factor) %>%\n  mutate(nuc_retrofit = nuc_hist) %>%\n  select(Week, coal, CCGT, TAC, lake, step, nuc_hist, nuc_retrofit, nuc_new) \n\navg_load_factor <- load_factor %>% \n  gather(key = technology, value = load.factor, -Week) %>% \n  group_by(technology) %>% summarise(avg.load.factor = mean(load.factor)) %>% ungroup()\n\navg_load_factor[nrow(avg_load_factor)+1,1] <- \"onshore\"\navg_load_factor[nrow(avg_load_factor),2] <- sum(Wind$Profile)*365/(nb.week*7*8760)\n  \navg_load_factor[nrow(avg_load_factor)+1,1] <- \"PV\"\navg_load_factor[nrow(avg_load_factor),2] <- sum(PV$Profile)*365/(nb.week*7*8760)\n\n\n# interest rate \nr <- 0.08\n\nLCOE <- list(capex, lifetimes, fOM, fuel, CO2price, CO2content, efficiency, avg_load_factor) %>%\n  reduce(full_join) %>%\n  mutate(annuity = capex * r / (1 - (1+r)^-lifetime),\n         variable.CO2 = (fuel + CO2.content*CO2.price)/efficiency,\n         variable.noCO2 = fuel/efficiency,\n         generation.hours = 8760*avg.load.factor,\n         LCOE.CO2 = variable.CO2 + 1000*(annuity + fOM ) / generation.hours,\n         LCOE.noCO2 = variable.noCO2 + 1000*(annuity + fOM ) / generation.hours)\n\n# Graph to check\nLCOE %>% \n  filter(scenario.CO2 == \"low\" & technology %in% c(\"CCGT\",\"onshore\",\"PV\",\"nuc_new\")) %>%\n  ggplot(aes(x = year, y = LCOE.noCO2, colour = technology)) + geom_point()\n\n\n\n# Modifying LCOE ----------------------------------------------------------\n\n# Function to compute capex to new value\ngetAnnuity <- function(LCOE, variable.cost, generation.hours, fOM) {\n  # generation.hours = average number of hours of production in a year\n  annuity <- (LCOE - variable.cost)*generation.hours/1000 - fOM\n}\n\n# Recalibrate new_nuc to a LCOE of 110\nlinearExtrapolation <- function(x, x1, x2, y1, y2) {\n  y <- y1 + (x-x1)*(y2-y1)/(x2-x1)\n}\n\n# exponential extrapolation\nexponentialExtrapolation <- function(x, x1, x2, y1, y2) {\n  x0 <- x - x1\n  a <- (y1 - y2) / (1 - exp(-(x2-x1)/10))\n  b <- y1 - a\n  out <- a*exp(-x0/10)+b\n}\n\nonshore_annuities <- tibble(year = initial.year:end.year,\n                         technology = \"onshore\",\n                         high = exponentialExtrapolation(year, initial.year, end.year, 82, 60),\n                         low = exponentialExtrapolation(year, initial.year, end.year, 82, 40)) %>% \n  gather(key = scenario.enr, value = LCOE2, -c(year,technology)) %>% \n  left_join(., LCOE %>% \n              filter(technology == \"onshore\" & scenario.CO2 == \"medium\"),\n            by = c(\"year\", \"technology\")) %>% \n  mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>% \n  select(year, scenario.enr, annuity2)\n\nPV_annuities <- tibble(year = initial.year:end.year,\n                       technology = \"PV\",\n                       high = exponentialExtrapolation(year, initial.year, end.year, 90, 50),\n                       low = exponentialExtrapolation(year, initial.year, end.year, 90, 25)) %>% \n  gather(key = scenario.enr, value = LCOE2, -c(year,technology)) %>% \n  left_join(., LCOE %>% \n              filter(technology == \"PV\" & scenario.CO2 == \"medium\"),\n            by = c(\"year\", \"technology\")) %>% \n  mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>% \n  select(year, scenario.enr, annuity2)\n\n#Nuclear new\nnuc_new_annuities <- tibble(year = initial.year:end.year,\n                       technology = \"nuc_new\",\n                      low = linearExtrapolation(year, initial.year, end.year, 110, 70),\n                      medium = linearExtrapolation(year, initial.year, end.year, 110, 90),\n                      high = linearExtrapolation(year, initial.year, end.year, 110, 110)) %>%\n  gather(key = scenario.nuc, value = LCOE2, -c(year,technology)) %>% \n  left_join(., LCOE %>% \n              filter(technology == \"nuc_new\" & scenario.CO2 == \"medium\"),\n            by = c(\"year\", \"technology\")) %>% \n  mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>% \n  select(year, scenario.nuc, annuity2)\n\n# Nuclear retrofitted\n\nnuc_retrofit_annuities <- tibble(year = initial.year:end.year,\n                            technology = \"nuc_retrofit\")\n\nfor (i in seq(from=40,to=90,by=10)) {\n  col <- rep(i,nrow(nuc_retrofit_annuities))\n  nuc_retrofit_annuities <- cbind(nuc_retrofit_annuities, col)\n  colnames(nuc_retrofit_annuities)[ncol(nuc_retrofit_annuities)] <- paste0(i)\n}\n\nnuc_retrofit_annuities <- nuc_retrofit_annuities %>% \n  gather(key = scenario.nuc_hist, value = LCOE2, -c(year,technology)) %>% \n  left_join(., LCOE %>% \n              filter(technology == \"nuc_retrofit\" & scenario.CO2 == \"medium\"),\n            by = c(\"year\", \"technology\")) %>% \n  mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>% \n  select(year, scenario.nuc_hist, annuity2)\n\n# Historical nuke annuities\nnuc_hist_annuities <- tibble(year = initial.year:end.year,\n                             technology = \"nuc_hist\",\n                             LCOE2 = 42 ) %>%\n  left_join(., LCOE %>% \n              filter(technology == \"nuc_hist\" & scenario.CO2 == \"medium\"),\n            by = c(\"year\", \"technology\")) %>% \n  mutate(annuity2 = (LCOE2 - variable.noCO2)*generation.hours/1000 - fOM) %>% \n  select(year, annuity2)\n\n\n\n# Hydro: run-of-river profile and lake inflows ----------------------------------------------------\n\nriver.capa <- capa0 %>% filter(Technology == \"river\") %>% select(Capacity) %>% as.numeric()\n\nriver <- RTE %>% \n  #on calcule d'avoir le facteur de charge pour chaque mois, heure et jour\n  group_by(Week, Day, Hour) %>% summarise(prod = mean(Hydraulique...Fil.de.l.eau...éclusée)) %>% ungroup() %>% \n  mutate(WeekHour = rep(1:168,nb.week)) %>% \n  select(Week, WeekHour, prod) %>% \n  mutate(prod = prod / 1000)\n# %>% \n#   # et ensuite on fait la moyenne mensuelle (sinon on a des problèmes avec le nombre de jours qui varie par mois)\n#   group_by(Month) %>% summarise(profile = mean(profile)) %>%  ungroup()\n\n\nlake_inflows <- RTE %>% \n  group_by(Week) %>% summarise(inflow = sum(Hydraulique...Lacs)) %>% ungroup() %>% \n  #convert to GWh\n  mutate(inflow = inflow / 1000)\n\nstep.capa <- readInput(\"Step_evolution.csv\") %>% \n  mutate(capa = evolution*( capa0 %>% filter(Technology == \"step\") %>% select(Capacity) %>% as.numeric())) %>% \n  select(-evolution)\n  \n\n# Write outputs --------------------------------------------------------\n\noutputParameter(Load %>% \n                  select(Week, WeekHour, Consumption) %>%\n                  rename(Hour = WeekHour),\n                file_name = \"consumption.csv\")\n\noutputParameter(Load %>% \n                  select(Week, WeekHour, Exports) %>%\n                  rename(Hour = WeekHour),\n                file_name = \"exports.csv\")\n\noutputParameter(Load_evolution %>% gather(key = scenario, value = demand, -Year), \n            file_name = \"load_evolution.csv\")\n\noutputParameter(lifetimes, file_name = \"lifetimes.csv\")\n\nVRE <- full_join(Wind %>% select(Week, WeekHour, Profile) %>% rename(onshore = Profile),\n                 PV %>% select(Week, WeekHour, Profile) %>% rename(PV = Profile),\n                 by = c(\"Week\",\"WeekHour\")) %>% \n  gather(key = technology, value = value, onshore:PV) %>%\n  select(technology, Week, WeekHour, value) %>%\n  outputParameter(file_name = \"vre_profiles.csv\")\n\n\noutputTable(load_factor, file_name = \"load_factor.csv\")\n\noutputParameter(LCOE %>% filter(scenario.CO2 == \"medium\") %>% select(year, technology, annuity), file_name = \"annuities.csv\")\n\noutputParameter(fOM, file_name = \"fixed_OM.csv\")\n\noutputParameter(fuel, file_name = \"fuel_costs.csv\")\n\noutputParameter(efficiency, file_name = \"efficiency.csv\")\n\noutputParameter(CO2content, file_name = \"CO2_content.csv\")\n\noutputParameter(CO2price, file_name = \"CO2_price.csv\")\n\noutputParameter(river, file_name = \"river.csv\")\n\noutputParameter(lake_inflows, file_name = \"lake_inflows.csv\")\n\nexogenous_capa <- tibble(year = initial.year:2050) %>%\n  mutate(nuc_hist = map_dbl(seq_along(initial.year:2050),\n                            function(i) sum(ListeNuclearPlants$Net.power..MWe.[ListeNuclearPlants$Visit4 >= seq(initial.year,2050)[i]])\n  )\n  ) %>%\n  mutate(nuc_hist = nuc_hist/1000) %>% \n  mutate(river = capa0 %>% filter(Technology == \"river\") %>% select(Capacity) %>% as.numeric(),\n         lake = capa0 %>% filter(Technology == \"lake\") %>% select(Capacity) %>% as.numeric(),\n         step = step.capa$capa) %>% \n  gather(technology, capacity,-year)\noutputParameter(exogenous_capa, file_name = \"exogenous_capacities.csv\")\n\nreserve_requirements <- readInput(\"Reserve_requirements.csv\") \noutputParameter(reserve_requirements, file_name = \"reserve_requirements.csv\")\n\noutputParameter(capa0, file_name = \"initial_capacities.csv\")\n\noutputParameter(onshore_annuities %>% arrange(desc(scenario.enr), year), file_name = \"onshore_annuity_scenarios.csv\")\n\noutputParameter(PV_annuities, file_name = \"PV_annuity_scenarios.csv\")\n\noutputParameter(nuc_hist_annuities, file_name = \"nuc_hist_annuities.csv\")\n\noutputParameter(nuc_retrofit_annuities, file_name = \"nuc_retrofit_annuities.csv\")\n\noutputParameter(nuc_new_annuities, file_name = \"nuc_new_annuities.csv\")\n\ndeploy_speed <- readInput(file_name = \"deploy_speed.csv\")\noutputParameter(deploy_speed, file_name = \"deploy_speed.csv\")\n\n# Error forecast ----------------------------------------------------------\nscalar1 <- function(x) {x / sqrt(sum(x^2, na.rm = T))}\n\n# Wind \nforecast_w <- readInput(\"PrevisionEolienne_2015.csv\") %>% \n  select(Date, Heure, Prevision.J.1) %>% \n  mutate(Heure = str_sub(Heure, end = -4),\n         Heure = as.numeric(Heure),\n         Date = as.Date(Date, \"%d/%m/%Y\")) %>% \n  rename(Hour = Heure) %>% \n  full_join(RTE %>% select(Date, Hour, Eolien), by = c(\"Date\",\"Hour\")) %>% \n  mutate(forecast_n = scalar1(Prevision.J.1),\n         output = scalar1(Eolien),\n         error = forecast_n - output,\n         error_n = scalar1(error))\nggplot(data = forecast_w, aes(error_n)) + geom_density()\n\nquantile(forecast_w$error_n, probs = 0.99, na.rm = T)\n\n# Solar\nforecast_pv <- readInput(\"PrevisionSolaire_2015.csv\") %>% \n  select(Date, Heure, Prevision.J.1) %>% \n  mutate(Heure = str_sub(Heure, end = -4),\n         Heure = as.numeric(Heure),\n         Date = as.Date(Date, \"%d/%m/%Y\")) %>% \n  rename(Hour = Heure) %>% \n  full_join(RTE %>% select(Date, Hour, Solaire), by = c(\"Date\",\"Hour\")) %>% \n  mutate(forecast_n = scalar1(Prevision.J.1),\n         output = scalar1(Solaire),\n         error = forecast_n - output,\n         error_n = scalar1(error))\n\nggplot(data = forecast_pv, aes(error_n)) + geom_density()\n\nquantile(forecast_pv$error_n, probs = 0.99, na.rm = T)\n\n\n# Plots for documentation -------------------------------------------------\n\n# Nuclear cliff\ng <- exogenous_capa %>% filter(technology == \"nuc_hist\") %>% \n  ggplot(aes(x = year, y = capacity)) + geom_bar(stat = \"identity\") + \n  labs(y = \"Nuclear capacity before retrofit (GW)\") +\n  theme_bw()\nggsave(filename = \"../outputs/nuclear_cliff.pdf\")\n\n# LCOE \ng <- LCOE %>% \n  filter(scenario.CO2 == \"low\") %>%\n  ggplot(aes(x = year, y = LCOE.noCO2, colour = technology)) + geom_point() + theme_bw();g\nggsave(g, filename = \"../outputs/calibration_LCOE.pdf\")\n\n\n# Tables for documentation ------------------------------------------------\n\ndocuTable <- function(df, file_name) {\n  #table for documentation\n  write.table(df, file = paste0(\"../outputs/documentation/\",file_name),\n              sep = \";\", dec = \".\", row.names = F)\n}\n\ndocuTable(df = capex %>% \n             filter(year %in% c(2015,2020,2030,2040,2050)) %>% \n             spread(key = technology, value = capex),\n          file_name = \"capex.csv\")\n\ndocuTable(df = fOM %>% \n            filter(year %in% c(2015,2020,2030,2040,2050)) %>% \n            spread(key = technology, value = fOM),\n          file_name = \"fOM.csv\")\n",
    "created" : 1505934472576.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4040555344",
    "id" : "8192A3A7",
    "lastKnownWriteTime" : 1504036820,
    "last_content_update" : 1504036820,
    "path" : "~/Documents/PhD/NuclearBet/FLORE/Modelling/data_preparation/code/code.R",
    "project_path" : "code/code.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}